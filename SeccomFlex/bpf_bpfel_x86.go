// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfEvent struct {
	Pid  uint32
	Comm [16]uint8
}

type bpfPidMountNs struct {
	Mountns uint32
	Pidns   uint32
}

type bpfPidSyscallArgs struct {
	Namespace bpfPidMountNs
	Syscall   uint32
}

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
}

// bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	BprmCheck         *ebpf.ProgramSpec `ebpf:"bprm_check"`
	Capable           *ebpf.ProgramSpec `ebpf:"capable"`
	Capget            *ebpf.ProgramSpec `ebpf:"capget"`
	Capset            *ebpf.ProgramSpec `ebpf:"capset"`
	FileFcntl         *ebpf.ProgramSpec `ebpf:"file_fcntl"`
	FileMprotect      *ebpf.ProgramSpec `ebpf:"file_mprotect"`
	FilePermission    *ebpf.ProgramSpec `ebpf:"file_permission"`
	FixSetgid         *ebpf.ProgramSpec `ebpf:"fix_setgid"`
	FixSetuid         *ebpf.ProgramSpec `ebpf:"fix_setuid"`
	MmapAddr          *ebpf.ProgramSpec `ebpf:"mmap_addr"`
	MmapFile          *ebpf.ProgramSpec `ebpf:"mmap_file"`
	MoveMount         *ebpf.ProgramSpec `ebpf:"move_mount"`
	PathChmod         *ebpf.ProgramSpec `ebpf:"path_chmod"`
	PathChroot        *ebpf.ProgramSpec `ebpf:"path_chroot"`
	PathLink          *ebpf.ProgramSpec `ebpf:"path_link"`
	PathMkdir         *ebpf.ProgramSpec `ebpf:"path_mkdir"`
	PathNotify        *ebpf.ProgramSpec `ebpf:"path_notify"`
	PathRename        *ebpf.ProgramSpec `ebpf:"path_rename"`
	PathRmdir         *ebpf.ProgramSpec `ebpf:"path_rmdir"`
	PathSymlink       *ebpf.ProgramSpec `ebpf:"path_symlink"`
	PathTruncate      *ebpf.ProgramSpec `ebpf:"path_truncate"`
	PathUnlink        *ebpf.ProgramSpec `ebpf:"path_unlink"`
	PtraceCheck       *ebpf.ProgramSpec `ebpf:"ptrace_check"`
	Quotactl          *ebpf.ProgramSpec `ebpf:"quotactl"`
	RtpSysEnter       *ebpf.ProgramSpec `ebpf:"rtp_sys_enter"`
	SbFreeMntOpts     *ebpf.ProgramSpec `ebpf:"sb_free_mnt_opts"`
	SbPivotroot       *ebpf.ProgramSpec `ebpf:"sb_pivotroot"`
	SbStatfs          *ebpf.ProgramSpec `ebpf:"sb_statfs"`
	Settime           *ebpf.ProgramSpec `ebpf:"settime"`
	SocketAccept      *ebpf.ProgramSpec `ebpf:"socket_accept"`
	SocketBind        *ebpf.ProgramSpec `ebpf:"socket_bind"`
	SocketConnect     *ebpf.ProgramSpec `ebpf:"socket_connect"`
	SocketCreate      *ebpf.ProgramSpec `ebpf:"socket_create"`
	SocketGetpeername *ebpf.ProgramSpec `ebpf:"socket_getpeername"`
	SocketListen      *ebpf.ProgramSpec `ebpf:"socket_listen"`
	SocketRecvmsg     *ebpf.ProgramSpec `ebpf:"socket_recvmsg"`
	SocketSendmsg     *ebpf.ProgramSpec `ebpf:"socket_sendmsg"`
	SocketSetsockopt  *ebpf.ProgramSpec `ebpf:"socket_setsockopt"`
	SocketShutdown    *ebpf.ProgramSpec `ebpf:"socket_shutdown"`
	Syslog            *ebpf.ProgramSpec `ebpf:"syslog"`
	TaskAlloc         *ebpf.ProgramSpec `ebpf:"task_alloc"`
	TaskGetpgid       *ebpf.ProgramSpec `ebpf:"task_getpgid"`
	TaskGetsid        *ebpf.ProgramSpec `ebpf:"task_getsid"`
	TaskSetpgid       *ebpf.ProgramSpec `ebpf:"task_setpgid"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	ContainerID_PID_map       *ebpf.MapSpec `ebpf:"containerID_PID_map"`
	Events                    *ebpf.MapSpec `ebpf:"events"`
	LsmToSyscall              *ebpf.MapSpec `ebpf:"lsm_to_syscall"`
	MonitoringMap             *ebpf.MapSpec `ebpf:"monitoring_map"`
	PolicyMap                 *ebpf.MapSpec `ebpf:"policy_map"`
	PolicyParamsBprmCheck     *ebpf.MapSpec `ebpf:"policy_params_bprm_check"`
	PolicyParamsFileMprotect  *ebpf.MapSpec `ebpf:"policy_params_file_mprotect"`
	PolicyParamsFixSetgid     *ebpf.MapSpec `ebpf:"policy_params_fix_setgid"`
	PolicyParamsFixSetuid     *ebpf.MapSpec `ebpf:"policy_params_fix_setuid"`
	PolicyParamsPathChmod     *ebpf.MapSpec `ebpf:"policy_params_path_chmod"`
	PolicyParamsPtraceAccess  *ebpf.MapSpec `ebpf:"policy_params_ptrace_access"`
	PolicyParamsSocketAccept  *ebpf.MapSpec `ebpf:"policy_params_socket_accept"`
	PolicyParamsSocketBind    *ebpf.MapSpec `ebpf:"policy_params_socket_bind"`
	PolicyParamsSocketConnect *ebpf.MapSpec `ebpf:"policy_params_socket_connect"`
	PolicyParamsSocketCreate  *ebpf.MapSpec `ebpf:"policy_params_socket_create"`
	PolicyParamsSocketListen  *ebpf.MapSpec `ebpf:"policy_params_socket_listen"`
	PolicyParamsSocketRecvmsg *ebpf.MapSpec `ebpf:"policy_params_socket_recvmsg"`
	PolicyParamsTaskAlloc     *ebpf.MapSpec `ebpf:"policy_params_task_alloc"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	ContainerID_PID_map       *ebpf.Map `ebpf:"containerID_PID_map"`
	Events                    *ebpf.Map `ebpf:"events"`
	LsmToSyscall              *ebpf.Map `ebpf:"lsm_to_syscall"`
	MonitoringMap             *ebpf.Map `ebpf:"monitoring_map"`
	PolicyMap                 *ebpf.Map `ebpf:"policy_map"`
	PolicyParamsBprmCheck     *ebpf.Map `ebpf:"policy_params_bprm_check"`
	PolicyParamsFileMprotect  *ebpf.Map `ebpf:"policy_params_file_mprotect"`
	PolicyParamsFixSetgid     *ebpf.Map `ebpf:"policy_params_fix_setgid"`
	PolicyParamsFixSetuid     *ebpf.Map `ebpf:"policy_params_fix_setuid"`
	PolicyParamsPathChmod     *ebpf.Map `ebpf:"policy_params_path_chmod"`
	PolicyParamsPtraceAccess  *ebpf.Map `ebpf:"policy_params_ptrace_access"`
	PolicyParamsSocketAccept  *ebpf.Map `ebpf:"policy_params_socket_accept"`
	PolicyParamsSocketBind    *ebpf.Map `ebpf:"policy_params_socket_bind"`
	PolicyParamsSocketConnect *ebpf.Map `ebpf:"policy_params_socket_connect"`
	PolicyParamsSocketCreate  *ebpf.Map `ebpf:"policy_params_socket_create"`
	PolicyParamsSocketListen  *ebpf.Map `ebpf:"policy_params_socket_listen"`
	PolicyParamsSocketRecvmsg *ebpf.Map `ebpf:"policy_params_socket_recvmsg"`
	PolicyParamsTaskAlloc     *ebpf.Map `ebpf:"policy_params_task_alloc"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.ContainerID_PID_map,
		m.Events,
		m.LsmToSyscall,
		m.MonitoringMap,
		m.PolicyMap,
		m.PolicyParamsBprmCheck,
		m.PolicyParamsFileMprotect,
		m.PolicyParamsFixSetgid,
		m.PolicyParamsFixSetuid,
		m.PolicyParamsPathChmod,
		m.PolicyParamsPtraceAccess,
		m.PolicyParamsSocketAccept,
		m.PolicyParamsSocketBind,
		m.PolicyParamsSocketConnect,
		m.PolicyParamsSocketCreate,
		m.PolicyParamsSocketListen,
		m.PolicyParamsSocketRecvmsg,
		m.PolicyParamsTaskAlloc,
	)
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	BprmCheck         *ebpf.Program `ebpf:"bprm_check"`
	Capable           *ebpf.Program `ebpf:"capable"`
	Capget            *ebpf.Program `ebpf:"capget"`
	Capset            *ebpf.Program `ebpf:"capset"`
	FileFcntl         *ebpf.Program `ebpf:"file_fcntl"`
	FileMprotect      *ebpf.Program `ebpf:"file_mprotect"`
	FilePermission    *ebpf.Program `ebpf:"file_permission"`
	FixSetgid         *ebpf.Program `ebpf:"fix_setgid"`
	FixSetuid         *ebpf.Program `ebpf:"fix_setuid"`
	MmapAddr          *ebpf.Program `ebpf:"mmap_addr"`
	MmapFile          *ebpf.Program `ebpf:"mmap_file"`
	MoveMount         *ebpf.Program `ebpf:"move_mount"`
	PathChmod         *ebpf.Program `ebpf:"path_chmod"`
	PathChroot        *ebpf.Program `ebpf:"path_chroot"`
	PathLink          *ebpf.Program `ebpf:"path_link"`
	PathMkdir         *ebpf.Program `ebpf:"path_mkdir"`
	PathNotify        *ebpf.Program `ebpf:"path_notify"`
	PathRename        *ebpf.Program `ebpf:"path_rename"`
	PathRmdir         *ebpf.Program `ebpf:"path_rmdir"`
	PathSymlink       *ebpf.Program `ebpf:"path_symlink"`
	PathTruncate      *ebpf.Program `ebpf:"path_truncate"`
	PathUnlink        *ebpf.Program `ebpf:"path_unlink"`
	PtraceCheck       *ebpf.Program `ebpf:"ptrace_check"`
	Quotactl          *ebpf.Program `ebpf:"quotactl"`
	RtpSysEnter       *ebpf.Program `ebpf:"rtp_sys_enter"`
	SbFreeMntOpts     *ebpf.Program `ebpf:"sb_free_mnt_opts"`
	SbPivotroot       *ebpf.Program `ebpf:"sb_pivotroot"`
	SbStatfs          *ebpf.Program `ebpf:"sb_statfs"`
	Settime           *ebpf.Program `ebpf:"settime"`
	SocketAccept      *ebpf.Program `ebpf:"socket_accept"`
	SocketBind        *ebpf.Program `ebpf:"socket_bind"`
	SocketConnect     *ebpf.Program `ebpf:"socket_connect"`
	SocketCreate      *ebpf.Program `ebpf:"socket_create"`
	SocketGetpeername *ebpf.Program `ebpf:"socket_getpeername"`
	SocketListen      *ebpf.Program `ebpf:"socket_listen"`
	SocketRecvmsg     *ebpf.Program `ebpf:"socket_recvmsg"`
	SocketSendmsg     *ebpf.Program `ebpf:"socket_sendmsg"`
	SocketSetsockopt  *ebpf.Program `ebpf:"socket_setsockopt"`
	SocketShutdown    *ebpf.Program `ebpf:"socket_shutdown"`
	Syslog            *ebpf.Program `ebpf:"syslog"`
	TaskAlloc         *ebpf.Program `ebpf:"task_alloc"`
	TaskGetpgid       *ebpf.Program `ebpf:"task_getpgid"`
	TaskGetsid        *ebpf.Program `ebpf:"task_getsid"`
	TaskSetpgid       *ebpf.Program `ebpf:"task_setpgid"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.BprmCheck,
		p.Capable,
		p.Capget,
		p.Capset,
		p.FileFcntl,
		p.FileMprotect,
		p.FilePermission,
		p.FixSetgid,
		p.FixSetuid,
		p.MmapAddr,
		p.MmapFile,
		p.MoveMount,
		p.PathChmod,
		p.PathChroot,
		p.PathLink,
		p.PathMkdir,
		p.PathNotify,
		p.PathRename,
		p.PathRmdir,
		p.PathSymlink,
		p.PathTruncate,
		p.PathUnlink,
		p.PtraceCheck,
		p.Quotactl,
		p.RtpSysEnter,
		p.SbFreeMntOpts,
		p.SbPivotroot,
		p.SbStatfs,
		p.Settime,
		p.SocketAccept,
		p.SocketBind,
		p.SocketConnect,
		p.SocketCreate,
		p.SocketGetpeername,
		p.SocketListen,
		p.SocketRecvmsg,
		p.SocketSendmsg,
		p.SocketSetsockopt,
		p.SocketShutdown,
		p.Syslog,
		p.TaskAlloc,
		p.TaskGetpgid,
		p.TaskGetsid,
		p.TaskSetpgid,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_bpfel_x86.o
var _BpfBytes []byte
